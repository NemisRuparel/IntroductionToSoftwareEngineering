ch.1  :  Software Development Process Models


WHAT IS SOFTWARE ?
Definition : 
	Software is collection or set of computer programs, procedures, rules or associated documents
	it includes audio, video, images etc.


WHAT IS SOFTWARE ENGINEERING ? 
Definition :
	Software engineering is an enginnering aprroach that covers various stages from planning to maintanance stage


SOFTWARE APPLICATION DOMAIN
	Area of software that it can operate easily


TYPES OF SOFTWARE 
mainly 2 types : Application Software
			     System Software


APPLICATION SOFTWARE : 
--> User requirement
--> Designed to fulfill user requirements
--> Ex., MS Excel, Browser


SYSTEM SOFTWARE : 
--> interface b/w software & hardware 
--> Designed to manage control of hardware and software 
--> Ex., OS, Drivers


CHARACTERISTICS OF GOOD SOFTWARE : 
	1.Maintainability
	2.Budget friendly 
	3.Reliability 
	4.Readability
	5.Reusability
	6.Modularity
	7.Functionality
	8.Portability
	9.Proper Documentation
	10.Correctness


SPECIAL CHARACTERISTICS OF SOFTWARE :  
	1.Software doesn't wear out 
		any hardware after long use it can be damaged but in case of software it can't be damages , through maintanance it can be upadatable
		it can't affected by "environmental effects"
	2. Software is engineered not manufactured 
		Hardware can't be modifieble but softeware can modifieble for use later on
	3. Reusability of component 
		Once software created it should be scalable , it should have ability to reuse its components
	4. Software is flexible for custom built 
		Software is manufactured from gathering user requirements and for fulfill requirements 


PROGRAM V/S SOFTWARE 
	1. small in size				1.large in size
	2. single developer 			2. team of developer
	3. may not be structured		3. well structured
	4. may not be scalable			4. can be scalable
	5. no or less documentation	5. well documented
	6. may not be maintainable	6. maintainable


SOFTWARE ENGINEERING LAYERED APPROACH : 
Four Layers 
	1. Quality 
		it is first layer of layered approach
		software mainly focuses on quality
		it checks wheather output satisfies user's requirement  or not 
		every organization should focus on its software quality		

	2. Process
		it is second layer of layered approach
		it is heart of software engineering		
		main idea behind add process in layered approach is to delivery good software in timely manner

	3. Method 
		it is third layer of layered approach
		it describes 'how  to build' and in which method software should be developed

	4. Tools
		it is fourth and last layer of layered approach
		it executes process in proper layer 
		it supports of its above layer


WHY SOFTWARE ENGINEERING ?
	1. To develop hugh quality software product
	2. To develop large problems
	3. To achieve skill of problem solving
	4. To construct project with agreed cost
	5. To deliver product with timely manner
	6. To become good programmer / developer


UMBRELLA ACTIVITIES
	"Please Follow Simple Rules During Real Software"
	1. P – Project Tracking & Control
	2. F – Formal Technical Review
	3. S – Software Quality Assurance (SQA)
	4. R – Risk Management
	5. D – Document Preparation & Production
	6. R – Reusability Management
	7. S – Software Configuration Management (SCM)


GENERIC PROCESS FRAMEWORK
	1. Communication
	2. Planning
	3. Modeling
	4. Construct
	5. Deployment


SOFTWARE DEVELOPMENT LIFE CYCLE
	1. Birth/Dead
	2. Development
	3. Maturity
	4. Maintenance

	1. Planning
	2. Analysis (SRS,Size estimation etc)
	3. Designing
	4. Coding/ Implementation
	5. Testing
	6. Maintenance


CLASSICAL WATERFALL MODEL
	1.Feasibility Study 
		anlysis of project weather it is feasible or not 
		feasible means budget, team management, time duration etc.
	2. Requirement Analysis & Specification
		SRS
	3. Design 
		Different diagrams of software 
	4. Coding & Unit Testing 
		Actual Implementation of product
	5. System Testing & Integration
		Combine small units
		Various type of testing like black box testing, whitebox testing, alpha, beta testing etc...
	6. Maintenance
		Maintain the product
		maximum affort (60%)

	Advantages : 
		BaseModel, Easy to Implement, Simple, SmallProject
	Disadvantages :
		NoFeedback, HighRisk, 60% effort in maintenance, NoExperiment, No Parallelism (Team can't work parellely)


ITERATIVE WATERFALL MODEL
	Modified version of classical waterfallmodel
	Difference b/w classical & iterative is feedback
	No feedback in Feasibility study 	

	Advantages : 
		BaseModel, Easy to Implement, Simple, SmallProject, Feedback
	Disadvantages :
		HighRisk, 60% effort in maintenance, NoExperiment, No Parallelism (Team can't work parellely), Not Efficient, Less customer interaction


INCREMENTAL MODEL
	Specially for large project
	module by module development 
	ex.,College : Faculties, Students, HODs, Attendance are the modules of College management system
	
	1.Requirements (SRS)
	2. Design&Delopment --> Testing --> Maintenance //for each & every model
	
	Advantages : 
		MaximumCustomerInteraction, ForLargeProducts, BenificialForEarlyReleaseDemand, FlexibleToChange   
	Disadvantages :
		NeedsGoodPlanning, SometimesComplexToDivideModules


PROTOTYPE MODEL
	Make replica before actual product
	User can give feedback
	If user's requirments are not clear then this model is worst 
	
	1. Requirement Gathering
	2. Quick design
	3. Refine Requirements
	4. Customer Evolution
		if customer accepts then 
			4.1. Design
			4.2. Implement
			4.3. Test
			4.4. Maintain
	if no then repeat 1,2,3....
	
	Advantages : 
		GoodForTechnicalAndRequirementRisks, MoreChancesOfUserSatisfaction, FlexibleForDesign&Development, 
	Disadvantages :
		CostlyForDevelopment, SometimesWastingOfTime, 
		if user not satified with initial prototype then it can be lose interaction


SPIRAL MODEL
	Best for risk management
	
	1. Objective determination & identify alternative solutions
	2. Identify & resolve risks
	3. Develop next version of product	
	4. Review & plan for next phase

	if user not satisfied then it continues like loops
	for large products
	used when risk is in every phase
	radius of spiral is equal to cost 
	angular dimension shows progress(if 180 then half complete,360 then one spiral is completed likevise...)
	Meta model because it uses multimodels like.. Iterative , prototype
	
	Advantages : 
		RiskHandling, ForLargeProducts, Flexible, MoreCustomerSatisfaction
	
	Disadvantages : 
		Complex, Costly, MuchMoreRiskAnalysis, TimeConsuming


AGILE DEVELOPMENT MODEL		
	Latest model in compare of non-agile models
	quick & Efficient
	for large models
	
	1. Divide product into small chunks (Iteration)
	2. Release 
	3. Feedback
	4. Enhance
 	5. Re-release
	
	Types : 
		- Scrum
		- XP 	

	Advantages : 
		FrequentDelivery, FaceToFaceCommunication, LessTimeConsuming
	
	Disadvantages : 
		LessDocumentation, RegularMaintananceRequired


SCRUM MODEL 
	Most popular agile methodology
	Lightweight (not complex), iterative (step by step), incremental framework
	Scrum breakdowns thedevelopment phases into stages or cycles called as "SPIRINTS"
	Time boundary is here
	One spirint at a time
	Team has scrum master and product owner with constant communication on dialy basis
	Widely Used

	Daily Scrum  : daily meeting of duration 10 to 15 minutes
	Backlog : Form where all details of product is mentioned 
	Scrum master : monitor of team that communicates with client
	Product Owner : Client 
	
	Advantages : 
		Freedom, HighQuality, LowRiskProduct, LessTimeConsuming, CustomerSatisfaction, Reviewing

	Disadvantages :
		MoreEfficientForSmallTeam (not for large teams), NoChangesInTheSpirint
		

eXTREME PROGRAMMING (XP) MODEL
	Suggest quick release 
 	bugs can be detact easily
        can be monitoring that how product works

	Advantages : 
		WellPerformance, LessDocumentationNeeded

	Disadvantages : 
		Time consuming, HighCost   
		

	
		


CH.2 : SOFTWARE REQUIREMENT ANALYSIS AND DESIGN 


REQUIREMENT GATHERING & ANALYSIS
 Requirement : 
	Description and functionalities of the target   system 
	Describes the system that what the system should do 









